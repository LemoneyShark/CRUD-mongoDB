package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/joho/godotenv"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

func main() {
	// ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
	mongoURI := os.Getenv("MONGO_URI")
	client, err := mongo.NewClient(options.Client().ApplyURI(mongoURI))
	if err != nil {
		log.Fatal(err)
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	err = client.Connect(ctx)
	if err != nil {
		log.Fatal(err)
	}
	defer client.Disconnect(ctx)

	// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
	err = client.Ping(ctx, nil)
	if err != nil {
		log.Fatal("Cannot connect to MongoDB:", err)
	}
	fmt.Println("Connected to MongoDB!")

	// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô
	db := client.Database("company")
	collection := db.Collection("employee")

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
	update(ctx, collection)
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
type Employee struct {
	Username string   `bson:"username"`
	Password int      `bson:"password"`
	Skills   []string `bson:"skills"`
}

// CREATE - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
/*func create(ctx context.Context, collection *mongo.Collection) {
	employees := []interface{}{
		Employee{
			Username: "PP",
			Password: 1122,
			Skills:   []string{"Python", "FastAPI"},
		},
		Employee{
			Username: "Kong",
			Password: 3322,
			Skills:   []string{"JavaScript", "React"},
		},
	}

	insertResult, err := collection.InsertMany(ctx, employees)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Inserted documents with IDs:", insertResult.InsertedIDs)
}*/

// READ - ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
func read(ctx context.Context, collection *mongo.Collection) {
	fmt.Println("\nüì• READ: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ PP")
	
	var result Employee
	err := collection.FindOne(ctx, bson.M{"username": "PP"}).Decode(&result)
	if err != nil {
		log.Fatal(err)
	}
	
	fmt.Printf("Found document: %+v\n", result)
}

// UPDATE - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
func update(ctx context.Context, collection *mongo.Collection) {
	fmt.Println("\nüõ†Ô∏è UPDATE: ‡πÅ‡∏Å‡πâ password ‡∏Ç‡∏≠‡∏á Kong ‡πÄ‡∏õ‡πá‡∏ô 9999")
	
	// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
	fmt.Println("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:")
	var beforeUpdate Employee
	err := collection.FindOne(ctx, bson.M{"username": "Kong"}).Decode(&beforeUpdate)
	if err != nil {
		log.Printf("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ Kong ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: %v", err)
	} else {
		fmt.Printf("%+v\n", beforeUpdate)
	}
	
	// ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
	filter := bson.M{"username": "Kong"}
	update := bson.M{"$set": bson.M{"password": 9999}}
	
	updateResult, err := collection.UpdateOne(ctx, filter, update)
	if err != nil {
		log.Fatal(err)
	}
	
	fmt.Printf("‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö: %d\n", updateResult.MatchedCount)
	fmt.Printf("‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: %d\n", updateResult.ModifiedCount)
	
	// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
	fmt.Println("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:")
	var afterUpdate Employee
	err = collection.FindOne(ctx, bson.M{"username": "Kong"}).Decode(&afterUpdate)
	if err != nil {
		log.Printf("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ Kong ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: %v", err)
	} else {
		fmt.Printf("%+v\n", afterUpdate)
	}
	
	// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô
	fmt.Println("\n‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô:")
	cursor, err := collection.Find(ctx, bson.M{})
	if err != nil {
		log.Fatal(err)
	}
	defer cursor.Close(ctx)
	
	var employees []Employee
	if err = cursor.All(ctx, &employees); err != nil {
		log.Fatal(err)
	}
	
	for _, emp := range employees {
		fmt.Printf("%+v\n", emp)
	}
}

// DELETE - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
/*func delete(ctx context.Context, collection *mongo.Collection) {
	fmt.Println("\nüóëÔ∏è DELETE: ‡∏•‡∏ö‡∏Ñ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ PP ‡∏≠‡∏≠‡∏Å")
	
	deleteResult, err := collection.DeleteOne(ctx, bson.M{"username": "PP"})
	if err != nil {
		log.Fatal(err)
	}
	
	fmt.Printf("Deleted %d document(s)\n", deleteResult.DeletedCount)
}*/